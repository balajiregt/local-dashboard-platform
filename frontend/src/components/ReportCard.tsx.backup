import React from 'react';
import {
  Card,
  CardContent,
  Typography,
  Chip,
  Box,
  LinearProgress,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Grid,
  Divider,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
} from '@mui/material';
import {
  ExpandMore as ExpandMoreIcon,
  BugReport as BugIcon,
  CheckCircle as CheckIcon,
  Error as ErrorIcon,
  Schedule as ScheduleIcon,
  Person as PersonIcon,
  Code as CodeIcon,
  Lightbulb as LightbulbIcon,
  TrendingUp as TrendingIcon,
  Assignment as AssignmentIcon,
} from '@mui/icons-material';
import { ProcessedTestReport } from '../types';
import { formatDistanceToNow, format } from 'date-fns';

interface ReportCardProps {
  report: ProcessedTestReport;
  isExpanded?: boolean;
}

const ReportCard: React.FC<ReportCardProps> = ({ report, isExpanded = false }) => {
  const { execution, summary, results } = report;
  
  const getStatusColor = () => {
    if ((summary.unexpectedFails || 0) > 0) return 'error';
    if (summary.failed > 0 && (summary.expectedFails || 0) === summary.failed) return 'warning';
    return 'success';
  };

  const getStatusText = () => {
    if ((summary.unexpectedFails || 0) > 0) return 'UNEXPECTED FAILURES';
    if (summary.failed > 0 && (summary.expectedFails || 0) === summary.failed) return 'EXPECTED FAILURES';
    return 'ALL PASSED';
  };

  const getIntentColor = (purpose: string) => {
    const colorMap: Record<string, any> = {
      'development': 'primary',
      'debugging': 'error',
      'regression': 'warning',
      'validation': 'success',
      'exploration': 'info',
      'ci-cd': 'secondary',
      'manual': 'default',
    };
    return colorMap[purpose] || 'default';
  };

  const outcomeMatchPercentage = summary.total > 0 
    ? Math.round((((summary.expectedFails || 0) + (summary.expectedPasses || 0)) / summary.total) * 100)
    : 0;

  return (
    <Card sx={{ mb: 2, position: 'relative' }}>
      {/* Report Header */}
      <CardContent>
        <Box display="flex" justifyContent="space-between" alignItems="flex-start" mb={2}>
          <Box>
            <Typography variant="h6" component="div" gutterBottom>
              Report #{execution.reportNumber}
              <Chip 
                size="small" 
                label={execution.uniqueId.split('_').pop()} 
                sx={{ ml: 1, fontFamily: 'monospace' }}
              />
            </Typography>
            <Box display="flex" alignItems="center" gap={1} mb={1}>
              <PersonIcon fontSize="small" color="action" />
              <Typography variant="body2" color="text.secondary">
                {execution.developer}
              </Typography>
              <ScheduleIcon fontSize="small" color="action" sx={{ ml: 1 }} />
              <Typography variant="body2" color="text.secondary">
                {formatDistanceToNow(execution.timestamp, { addSuffix: true })}
              </Typography>
            </Box>
          </Box>
          
          <Box textAlign="right">
            <Chip
              label={getStatusText()}
              color={getStatusColor()}
              size="small"
              sx={{ mb: 1 }}
            />
            <Typography variant="body2" color="text.secondary">
              Duration: {Math.round(execution.duration / 1000)}s
            </Typography>
          </Box>
        </Box>

        {/* Intent and Context */}
        <Box mb={2}>
          <Box display="flex" alignItems="center" gap={1} mb={1}>
            {execution.intent && (
              <Chip
                icon={<AssignmentIcon />}
                label={execution.intent.purpose}
                color={getIntentColor(execution.intent.purpose)}
                size="small"
              />
            )}
            {execution.insights && (
              <Chip
                label={`Confidence: ${execution.insights.confidence}/10`}
                variant="outlined"
                size="small"
              />
            )}
            <Chip
              label={`Match: ${outcomeMatchPercentage}%`}
              color={outcomeMatchPercentage >= 80 ? 'success' : 'warning'}
              variant="outlined"
              size="small"
            />
          </Box>
          
          {execution.intent?.description && (
            <Typography variant="body2" color="text.secondary" sx={{ fontStyle: 'italic' }}>
              "{execution.intent.description}"
            </Typography>
          )}
        </Box>

        {/* Test Results Summary */}
        <Grid container spacing={2} mb={2}>
          <Grid item xs={6} sm={3}>
            <Box textAlign="center">
              <Typography variant="h4" color="success.main">
                {summary.passed}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                Passed
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={6} sm={3}>
            <Box textAlign="center">
              <Typography variant="h4" color="error.main">
                {summary.failed}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                Failed
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={6} sm={3}>
            <Box textAlign="center">
              <Typography variant="h4" color="warning.main">
                {summary.expectedFails}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                Expected Fails
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={6} sm={3}>
            <Box textAlign="center">
              <Typography variant="h4" color="error.main">
                {summary.unexpectedFails}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                Unexpected Fails
              </Typography>
            </Box>
          </Grid>
        </Grid>

        {/* Progress Bar */}
        <Box mb={2}>
          <Box display="flex" justifyContent="space-between" mb={1}>
            <Typography variant="body2">Test Results</Typography>
            <Typography variant="body2">
              {summary.passed}/{summary.total} passed
            </Typography>
          </Box>
          <LinearProgress
            variant="determinate"
            value={(summary.passed / summary.total) * 100}
            sx={{ height: 8, borderRadius: 4 }}
          />
        </Box>

        {/* Expandable Sections */}
        {isExpanded && (
          <Box>
            {/* Insights Section */}
            <Accordion defaultExpanded>
              <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <LightbulbIcon sx={{ mr: 1 }} />
                <Typography>Insights & Analysis</Typography>
              </AccordionSummary>
              <AccordionDetails>
                <Grid container spacing={2}>
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle2" gutterBottom>
                      Expected vs Actual Behavior
                    </Typography>
                    <Typography variant="body2" color="text.secondary" paragraph>
                      <strong>Expected:</strong> {execution.insights?.expectedBehavior}
                    </Typography>
                    <Typography variant="body2" color="text.secondary" paragraph>
                      <strong>Actual:</strong> {execution.insights?.actualBehavior}
                    </Typography>
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle2" gutterBottom>
                      Reasoning
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {execution.insights?.reasoning}
                    </Typography>
                  </Grid>
                </Grid>

                <Divider sx={{ my: 2 }} />

                <Grid container spacing={2}>
                  {execution.insights.surprises.length > 0 && (
                    <Grid item xs={12} md={4}>
                      <Typography variant="subtitle2" gutterBottom color="warning.main">
                        Surprises
                      </Typography>
                      <List dense>
                        {execution.insights.surprises.map((surprise, index) => (
                          <ListItem key={index} sx={{ pl: 0 }}>
                            <ListItemIcon sx={{ minWidth: 32 }}>
                              <ErrorIcon fontSize="small" color="warning" />
                            </ListItemIcon>
                            <ListItemText 
                              primary={surprise}
                              primaryTypographyProps={{ variant: 'body2' }}
                            />
                          </ListItem>
                        ))}
                      </List>
                    </Grid>
                  )}

                  {execution.insights.learnings.length > 0 && (
                    <Grid item xs={12} md={4}>
                      <Typography variant="subtitle2" gutterBottom color="info.main">
                        Learnings
                      </Typography>
                      <List dense>
                        {execution.insights.learnings.map((learning, index) => (
                          <ListItem key={index} sx={{ pl: 0 }}>
                            <ListItemIcon sx={{ minWidth: 32 }}>
                              <LightbulbIcon fontSize="small" color="info" />
                            </ListItemIcon>
                            <ListItemText 
                              primary={learning}
                              primaryTypographyProps={{ variant: 'body2' }}
                            />
                          </ListItem>
                        ))}
                      </List>
                    </Grid>
                  )}

                  {execution.insights.nextSteps.length > 0 && (
                    <Grid item xs={12} md={4}>
                      <Typography variant="subtitle2" gutterBottom color="success.main">
                        Next Steps
                      </Typography>
                      <List dense>
                        {execution.insights.nextSteps.map((step, index) => (
                          <ListItem key={index} sx={{ pl: 0 }}>
                            <ListItemIcon sx={{ minWidth: 32 }}>
                              <TrendingIcon fontSize="small" color="success" />
                            </ListItemIcon>
                            <ListItemText 
                              primary={step}
                              primaryTypographyProps={{ variant: 'body2' }}
                            />
                          </ListItem>
                        ))}
                      </List>
                    </Grid>
                  )}
                </Grid>
              </AccordionDetails>
            </Accordion>

            {/* Goals & Context */}
            <Accordion>
              <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <AssignmentIcon sx={{ mr: 1 }} />
                <Typography>Goals & Context</Typography>
              </AccordionSummary>
              <AccordionDetails>
                <Grid container spacing={2}>
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle2" gutterBottom>
                      Testing Goals
                    </Typography>
                    <List dense>
                      {execution.intent.goals.map((goal, index) => (
                        <ListItem key={index} sx={{ pl: 0 }}>
                          <ListItemIcon sx={{ minWidth: 32 }}>
                            <CheckIcon fontSize="small" color="primary" />
                          </ListItemIcon>
                          <ListItemText 
                            primary={goal}
                            primaryTypographyProps={{ variant: 'body2' }}
                          />
                        </ListItem>
                      ))}
                    </List>
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle2" gutterBottom>
                      Context & Metadata
                    </Typography>
                    <Typography variant="body2" color="text.secondary" paragraph>
                      <strong>Environment:</strong> {execution.environment}
                    </Typography>
                    {execution.branch && (
                      <Typography variant="body2" color="text.secondary" paragraph>
                        <strong>Branch:</strong> {execution.branch}
                      </Typography>
                    )}
                    <Typography variant="body2" color="text.secondary" paragraph>
                      <strong>Test Run Reason:</strong> {execution.metadata.testRunReason}
                    </Typography>
                    {execution.metadata.gitCommit && (
                      <Typography variant="body2" color="text.secondary" paragraph>
                        <strong>Git Commit:</strong> 
                        <Chip 
                          label={execution.metadata.gitCommit.substring(0, 8)}
                          size="small"
                          sx={{ ml: 1, fontFamily: 'monospace' }}
                        />
                      </Typography>
                    )}
                  </Grid>
                </Grid>

                {execution.intent.context && (
                  <Box mt={2}>
                    <Typography variant="subtitle2" gutterBottom>
                      Additional Context
                    </Typography>
                    <Typography variant="body2" color="text.secondary" sx={{ 
                      p: 2, 
                      bgcolor: 'grey.50', 
                      borderRadius: 1,
                      fontStyle: 'italic'
                    }}>
                      {execution.intent.context}
                    </Typography>
                  </Box>
                )}
              </AccordionDetails>
            </Accordion>

            {/* Failed Tests Details */}
            {summary.failed > 0 && (
              <Accordion>
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <BugIcon sx={{ mr: 1 }} color="error" />
                  <Typography>Failed Tests ({summary.failed})</Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <List>
                    {results
                      .filter(result => result.status === 'failed')
                      .map((result, index) => (
                        <ListItem key={index} divider>
                          <ListItemIcon>
                            <ErrorIcon color="error" />
                          </ListItemIcon>
                          <ListItemText
                            primary={result.testName}
                            secondary={
                              <Box>
                                {result.error && (
                                  <Typography variant="body2" color="error" sx={{ mt: 1 }}>
                                    {result.error}
                                  </Typography>
                                )}
                                <Box display="flex" gap={1} mt={1}>
                                  <Chip
                                    label={result.outcomeMatch ? 'Expected' : 'Unexpected'}
                                    color={result.outcomeMatch ? 'warning' : 'error'}
                                    size="small"
                                  />
                                  <Chip
                                    label={`${result.duration}ms`}
                                    variant="outlined"
                                    size="small"
                                  />
                                </Box>
                              </Box>
                            }
                          />
                        </ListItem>
                      ))}
                  </List>
                </AccordionDetails>
              </Accordion>
            )}

            {/* Technical Details */}
            <Accordion>
              <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <CodeIcon sx={{ mr: 1 }} />
                <Typography>Technical Details</Typography>
              </AccordionSummary>
              <AccordionDetails>
                <Grid container spacing={2}>
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle2" gutterBottom>
                      Execution Timeline
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      <strong>Started:</strong> {format(execution.startTime, 'PPpp')}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      <strong>Completed:</strong> {format(execution.endTime, 'PPpp')}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      <strong>Duration:</strong> {Math.round(execution.duration / 1000)}s
                    </Typography>
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle2" gutterBottom>
                      Tags & Classification
                    </Typography>
                    <Box display="flex" flexWrap="wrap" gap={0.5}>
                      {execution.metadata.tags.map((tag, index) => (
                        <Chip
                          key={index}
                          label={tag}
                          size="small"
                          variant="outlined"
                        />
                      ))}
                    </Box>
                  </Grid>
                </Grid>
              </AccordionDetails>
            </Accordion>
          </Box>
        )}
      </CardContent>
    </Card>
  );
};

export default ReportCard; 