{"ast":null,"code":"export class LocalDataService {\n  constructor() {\n    this.baseUrl = '/mock-data';\n  }\n  async getReportsIndex() {\n    try {\n      const response = await fetch(`${this.baseUrl}/reports/index.json`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data.reports.map(report => ({\n        ...report,\n        timestamp: new Date(report.timestamp)\n      }));\n    } catch (error) {\n      console.warn('Failed to fetch reports index:', error);\n      return [];\n    }\n  }\n  async getReport(reportId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/reports/${reportId}/report.json`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const report = await response.json();\n      return {\n        ...report,\n        execution: {\n          ...report.execution,\n          timestamp: new Date(report.execution.timestamp),\n          startTime: new Date(report.execution.startTime),\n          endTime: new Date(report.execution.endTime)\n        }\n      };\n    } catch (error) {\n      console.warn(`Failed to fetch report ${reportId}:`, error);\n      return null;\n    }\n  }\n  async getAssetUrl(reportId, assetPath) {\n    // For local testing, return a placeholder or actual asset path\n    return `${this.baseUrl}/reports/${reportId}/assets/${assetPath}`;\n  }\n  async validateConnection() {\n    try {\n      const response = await fetch(`${this.baseUrl}/reports/index.json`);\n      return response.ok;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\n// Singleton service instance for local testing\nlet localDataService = null;\nexport function getLocalDataService() {\n  if (!localDataService) {\n    localDataService = new LocalDataService();\n  }\n  return localDataService;\n}","map":{"version":3,"names":["LocalDataService","constructor","baseUrl","getReportsIndex","response","fetch","ok","Error","status","data","json","reports","map","report","timestamp","Date","error","console","warn","getReport","reportId","execution","startTime","endTime","getAssetUrl","assetPath","validateConnection","localDataService","getLocalDataService"],"sources":["/Users/bky13/Desktop/local_dashboard_platform/frontend/src/services/local.ts"],"sourcesContent":["import { ProcessedTestReport, ReportSummary } from '../types';\n\nexport class LocalDataService {\n  private baseUrl = '/mock-data';\n\n  async getReportsIndex(): Promise<ReportSummary[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/reports/index.json`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      \n      return data.reports.map((report: any) => ({\n        ...report,\n        timestamp: new Date(report.timestamp),\n      }));\n    } catch (error) {\n      console.warn('Failed to fetch reports index:', error);\n      return [];\n    }\n  }\n\n  async getReport(reportId: string): Promise<ProcessedTestReport | null> {\n    try {\n      const response = await fetch(`${this.baseUrl}/reports/${reportId}/report.json`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const report = await response.json();\n      \n      return {\n        ...report,\n        execution: {\n          ...report.execution,\n          timestamp: new Date(report.execution.timestamp),\n          startTime: new Date(report.execution.startTime),\n          endTime: new Date(report.execution.endTime),\n        },\n      };\n    } catch (error) {\n      console.warn(`Failed to fetch report ${reportId}:`, error);\n      return null;\n    }\n  }\n\n  async getAssetUrl(reportId: string, assetPath: string): Promise<string | null> {\n    // For local testing, return a placeholder or actual asset path\n    return `${this.baseUrl}/reports/${reportId}/assets/${assetPath}`;\n  }\n\n  async validateConnection(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/reports/index.json`);\n      return response.ok;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\n// Singleton service instance for local testing\nlet localDataService: LocalDataService | null = null;\n\nexport function getLocalDataService(): LocalDataService {\n  if (!localDataService) {\n    localDataService = new LocalDataService();\n  }\n  return localDataService;\n} "],"mappings":"AAEA,OAAO,MAAMA,gBAAgB,CAAC;EAAAC,YAAA;IAAA,KACpBC,OAAO,GAAG,YAAY;EAAA;EAE9B,MAAMC,eAAeA,CAAA,EAA6B;IAChD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACH,OAAO,qBAAqB,CAAC;MAClE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAElC,OAAOD,IAAI,CAACE,OAAO,CAACC,GAAG,CAAEC,MAAW,KAAM;QACxC,GAAGA,MAAM;QACTC,SAAS,EAAE,IAAIC,IAAI,CAACF,MAAM,CAACC,SAAS;MACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,gCAAgC,EAAEF,KAAK,CAAC;MACrD,OAAO,EAAE;IACX;EACF;EAEA,MAAMG,SAASA,CAACC,QAAgB,EAAuC;IACrE,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACH,OAAO,YAAYkB,QAAQ,cAAc,CAAC;MAC/E,IAAI,CAAChB,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MACA,MAAMK,MAAM,GAAG,MAAMT,QAAQ,CAACM,IAAI,CAAC,CAAC;MAEpC,OAAO;QACL,GAAGG,MAAM;QACTQ,SAAS,EAAE;UACT,GAAGR,MAAM,CAACQ,SAAS;UACnBP,SAAS,EAAE,IAAIC,IAAI,CAACF,MAAM,CAACQ,SAAS,CAACP,SAAS,CAAC;UAC/CQ,SAAS,EAAE,IAAIP,IAAI,CAACF,MAAM,CAACQ,SAAS,CAACC,SAAS,CAAC;UAC/CC,OAAO,EAAE,IAAIR,IAAI,CAACF,MAAM,CAACQ,SAAS,CAACE,OAAO;QAC5C;MACF,CAAC;IACH,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,0BAA0BE,QAAQ,GAAG,EAAEJ,KAAK,CAAC;MAC1D,OAAO,IAAI;IACb;EACF;EAEA,MAAMQ,WAAWA,CAACJ,QAAgB,EAAEK,SAAiB,EAA0B;IAC7E;IACA,OAAO,GAAG,IAAI,CAACvB,OAAO,YAAYkB,QAAQ,WAAWK,SAAS,EAAE;EAClE;EAEA,MAAMC,kBAAkBA,CAAA,EAAqB;IAC3C,IAAI;MACF,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACH,OAAO,qBAAqB,CAAC;MAClE,OAAOE,QAAQ,CAACE,EAAE;IACpB,CAAC,CAAC,OAAOU,KAAK,EAAE;MACd,OAAO,KAAK;IACd;EACF;AACF;;AAEA;AACA,IAAIW,gBAAyC,GAAG,IAAI;AAEpD,OAAO,SAASC,mBAAmBA,CAAA,EAAqB;EACtD,IAAI,CAACD,gBAAgB,EAAE;IACrBA,gBAAgB,GAAG,IAAI3B,gBAAgB,CAAC,CAAC;EAC3C;EACA,OAAO2B,gBAAgB;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}