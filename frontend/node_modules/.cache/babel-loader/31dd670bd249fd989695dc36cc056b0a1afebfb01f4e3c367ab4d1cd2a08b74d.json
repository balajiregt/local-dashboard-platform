{"ast":null,"code":"import axios from 'axios';\nexport class GitHubService {\n  constructor(config) {\n    this.client = void 0;\n    this.config = void 0;\n    this.config = config;\n    this.client = axios.create({\n      baseURL: config.apiUrl,\n      headers: {\n        'Accept': 'application/vnd.github.v3+json',\n        ...(config.token && {\n          'Authorization': `token ${config.token}`\n        })\n      }\n    });\n  }\n  async getReportsIndex() {\n    try {\n      const response = await this.client.get(`/repos/${this.config.owner}/${this.config.repo}/contents/reports/index.json`);\n      const content = atob(response.data.content);\n      const index = JSON.parse(content);\n      return index.reports.map(report => ({\n        ...report,\n        timestamp: new Date(report.timestamp)\n      }));\n    } catch (error) {\n      console.warn('Failed to fetch reports index:', error);\n      return [];\n    }\n  }\n  async getReport(reportId) {\n    try {\n      const response = await this.client.get(`/repos/${this.config.owner}/${this.config.repo}/contents/reports/${reportId}/report.json`);\n      const content = atob(response.data.content);\n      const report = JSON.parse(content);\n      return {\n        ...report,\n        execution: {\n          ...report.execution,\n          timestamp: new Date(report.execution.timestamp)\n        }\n      };\n    } catch (error) {\n      console.warn(`Failed to fetch report ${reportId}:`, error);\n      return null;\n    }\n  }\n  async getAssetUrl(reportId, assetPath) {\n    try {\n      const response = await this.client.get(`/repos/${this.config.owner}/${this.config.repo}/contents/reports/${reportId}/assets/${assetPath}`);\n      return response.data.download_url;\n    } catch (error) {\n      console.warn(`Failed to get asset URL for ${assetPath}:`, error);\n      return null;\n    }\n  }\n  async validateConnection() {\n    try {\n      const response = await this.client.get(`/repos/${this.config.owner}/${this.config.repo}`);\n      return response.status === 200;\n    } catch (error) {\n      return false;\n    }\n  }\n  getConfig() {\n    return this.config;\n  }\n}\n\n// Singleton service instance\nlet githubService = null;\nexport function initializeGitHubService() {\n  const repoUrl = process.env.REACT_APP_GITHUB_REPO || '';\n  const [owner, repo] = repoUrl.split('/');\n  if (!owner || !repo) {\n    throw new Error('GitHub repository not configured. Set REACT_APP_GITHUB_REPO environment variable.');\n  }\n  const config = {\n    owner,\n    repo,\n    token: process.env.REACT_APP_GITHUB_TOKEN,\n    apiUrl: 'https://api.github.com'\n  };\n  githubService = new GitHubService(config);\n  return githubService;\n}\nexport function getGitHubService() {\n  if (!githubService) {\n    return initializeGitHubService();\n  }\n  return githubService;\n}","map":{"version":3,"names":["axios","GitHubService","constructor","config","client","create","baseURL","apiUrl","headers","token","getReportsIndex","response","get","owner","repo","content","atob","data","index","JSON","parse","reports","map","report","timestamp","Date","error","console","warn","getReport","reportId","execution","getAssetUrl","assetPath","download_url","validateConnection","status","getConfig","githubService","initializeGitHubService","repoUrl","process","env","REACT_APP_GITHUB_REPO","split","Error","REACT_APP_GITHUB_TOKEN","getGitHubService"],"sources":["/Users/bky13/Desktop/local_dashboard_platform/frontend/src/services/github.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport { ProcessedTestReport, ReportSummary, GitHubConfig } from '../types';\n\nexport class GitHubService {\n  private client: AxiosInstance;\n  private config: GitHubConfig;\n\n  constructor(config: GitHubConfig) {\n    this.config = config;\n    this.client = axios.create({\n      baseURL: config.apiUrl,\n      headers: {\n        'Accept': 'application/vnd.github.v3+json',\n        ...(config.token && { 'Authorization': `token ${config.token}` }),\n      },\n    });\n  }\n\n  async getReportsIndex(): Promise<ReportSummary[]> {\n    try {\n      const response = await this.client.get(`/repos/${this.config.owner}/${this.config.repo}/contents/reports/index.json`);\n      const content = atob(response.data.content);\n      const index = JSON.parse(content);\n      \n      return index.reports.map((report: any) => ({\n        ...report,\n        timestamp: new Date(report.timestamp),\n      }));\n    } catch (error) {\n      console.warn('Failed to fetch reports index:', error);\n      return [];\n    }\n  }\n\n  async getReport(reportId: string): Promise<ProcessedTestReport | null> {\n    try {\n      const response = await this.client.get(\n        `/repos/${this.config.owner}/${this.config.repo}/contents/reports/${reportId}/report.json`\n      );\n      const content = atob(response.data.content);\n      const report = JSON.parse(content);\n      \n      return {\n        ...report,\n        execution: {\n          ...report.execution,\n          timestamp: new Date(report.execution.timestamp),\n        },\n      };\n    } catch (error) {\n      console.warn(`Failed to fetch report ${reportId}:`, error);\n      return null;\n    }\n  }\n\n  async getAssetUrl(reportId: string, assetPath: string): Promise<string | null> {\n    try {\n      const response = await this.client.get(\n        `/repos/${this.config.owner}/${this.config.repo}/contents/reports/${reportId}/assets/${assetPath}`\n      );\n      return response.data.download_url;\n    } catch (error) {\n      console.warn(`Failed to get asset URL for ${assetPath}:`, error);\n      return null;\n    }\n  }\n\n  async validateConnection(): Promise<boolean> {\n    try {\n      const response = await this.client.get(`/repos/${this.config.owner}/${this.config.repo}`);\n      return response.status === 200;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  getConfig(): GitHubConfig {\n    return this.config;\n  }\n}\n\n// Singleton service instance\nlet githubService: GitHubService | null = null;\n\nexport function initializeGitHubService(): GitHubService {\n  const repoUrl = process.env.REACT_APP_GITHUB_REPO || '';\n  const [owner, repo] = repoUrl.split('/');\n  \n  if (!owner || !repo) {\n    throw new Error('GitHub repository not configured. Set REACT_APP_GITHUB_REPO environment variable.');\n  }\n\n  const config: GitHubConfig = {\n    owner,\n    repo,\n    token: process.env.REACT_APP_GITHUB_TOKEN,\n    apiUrl: 'https://api.github.com',\n  };\n\n  githubService = new GitHubService(config);\n  return githubService;\n}\n\nexport function getGitHubService(): GitHubService {\n  if (!githubService) {\n    return initializeGitHubService();\n  }\n  return githubService;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}