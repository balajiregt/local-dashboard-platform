{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  reports: [],\n  selectedReport: null,\n  loading: false,\n  error: null,\n  filters: {}\n};\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n    setReports: (state, action) => {\n      state.reports = action.payload;\n    },\n    setSelectedReport: (state, action) => {\n      state.selectedReport = action.payload;\n    },\n    setFilters: (state, action) => {\n      state.filters = action.payload;\n    },\n    clearError: state => {\n      state.error = null;\n    },\n    addReport: (state, action) => {\n      state.reports.unshift(action.payload);\n    },\n    updateReport: (state, action) => {\n      const index = state.reports.findIndex(r => r.id === action.payload.id);\n      if (index !== -1) {\n        state.reports[index] = action.payload;\n      }\n    },\n    removeReport: (state, action) => {\n      state.reports = state.reports.filter(r => r.id !== action.payload);\n    }\n  }\n});\nexport const {\n  setLoading,\n  setError,\n  setReports,\n  setSelectedReport,\n  setFilters,\n  clearError,\n  addReport,\n  updateReport,\n  removeReport\n} = dashboardSlice.actions;\nexport default dashboardSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","reports","selectedReport","loading","error","filters","dashboardSlice","name","reducers","setLoading","state","action","payload","setError","setReports","setSelectedReport","setFilters","clearError","addReport","unshift","updateReport","index","findIndex","r","id","removeReport","filter","actions","reducer"],"sources":["/Users/bky13/Desktop/local_dashboard_platform/frontend/src/store/dashboardSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { DashboardState, ReportSummary, ProcessedTestReport, DashboardFilters } from '../types';\n\nconst initialState: DashboardState = {\n  reports: [],\n  selectedReport: null,\n  loading: false,\n  error: null,\n  filters: {},\n};\n\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action: PayloadAction<string | null>) => {\n      state.error = action.payload;\n    },\n    setReports: (state, action: PayloadAction<ReportSummary[]>) => {\n      state.reports = action.payload;\n    },\n    setSelectedReport: (state, action: PayloadAction<ProcessedTestReport | null>) => {\n      state.selectedReport = action.payload;\n    },\n    setFilters: (state, action: PayloadAction<DashboardFilters>) => {\n      state.filters = action.payload;\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n    addReport: (state, action: PayloadAction<ReportSummary>) => {\n      state.reports.unshift(action.payload);\n    },\n    updateReport: (state, action: PayloadAction<ReportSummary>) => {\n      const index = state.reports.findIndex(r => r.id === action.payload.id);\n      if (index !== -1) {\n        state.reports[index] = action.payload;\n      }\n    },\n    removeReport: (state, action: PayloadAction<string>) => {\n      state.reports = state.reports.filter(r => r.id !== action.payload);\n    },\n  },\n});\n\nexport const {\n  setLoading,\n  setError,\n  setReports,\n  setSelectedReport,\n  setFilters,\n  clearError,\n  addReport,\n  updateReport,\n  removeReport,\n} = dashboardSlice.actions;\n\nexport default dashboardSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAG7D,MAAMC,YAA4B,GAAG;EACnCC,OAAO,EAAE,EAAE;EACXC,cAAc,EAAE,IAAI;EACpBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,MAAMC,cAAc,GAAGP,WAAW,CAAC;EACjCQ,IAAI,EAAE,WAAW;EACjBP,YAAY;EACZQ,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACP,OAAO,GAAGQ,MAAM,CAACC,OAAO;IAChC,CAAC;IACDC,QAAQ,EAAEA,CAACH,KAAK,EAAEC,MAAoC,KAAK;MACzDD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDE,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAAsC,KAAK;MAC7DD,KAAK,CAACT,OAAO,GAAGU,MAAM,CAACC,OAAO;IAChC,CAAC;IACDG,iBAAiB,EAAEA,CAACL,KAAK,EAAEC,MAAiD,KAAK;MAC/ED,KAAK,CAACR,cAAc,GAAGS,MAAM,CAACC,OAAO;IACvC,CAAC;IACDI,UAAU,EAAEA,CAACN,KAAK,EAAEC,MAAuC,KAAK;MAC9DD,KAAK,CAACL,OAAO,GAAGM,MAAM,CAACC,OAAO;IAChC,CAAC;IACDK,UAAU,EAAGP,KAAK,IAAK;MACrBA,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB,CAAC;IACDc,SAAS,EAAEA,CAACR,KAAK,EAAEC,MAAoC,KAAK;MAC1DD,KAAK,CAACT,OAAO,CAACkB,OAAO,CAACR,MAAM,CAACC,OAAO,CAAC;IACvC,CAAC;IACDQ,YAAY,EAAEA,CAACV,KAAK,EAAEC,MAAoC,KAAK;MAC7D,MAAMU,KAAK,GAAGX,KAAK,CAACT,OAAO,CAACqB,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKb,MAAM,CAACC,OAAO,CAACY,EAAE,CAAC;MACtE,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBX,KAAK,CAACT,OAAO,CAACoB,KAAK,CAAC,GAAGV,MAAM,CAACC,OAAO;MACvC;IACF,CAAC;IACDa,YAAY,EAAEA,CAACf,KAAK,EAAEC,MAA6B,KAAK;MACtDD,KAAK,CAACT,OAAO,GAAGS,KAAK,CAACT,OAAO,CAACyB,MAAM,CAACH,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKb,MAAM,CAACC,OAAO,CAAC;IACpE;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXH,UAAU;EACVI,QAAQ;EACRC,UAAU;EACVC,iBAAiB;EACjBC,UAAU;EACVC,UAAU;EACVC,SAAS;EACTE,YAAY;EACZK;AACF,CAAC,GAAGnB,cAAc,CAACqB,OAAO;AAE1B,eAAerB,cAAc,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}