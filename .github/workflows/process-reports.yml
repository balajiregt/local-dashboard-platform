name: Process Test Reports

on:
  push:
    paths:
      - 'reports/**/*.json'
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  process-reports:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Add test report') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd cli
          npm ci

      - name: Process new reports
        run: |
          # Find new or modified report files
          NEW_REPORTS=$(git diff --name-only HEAD~1 HEAD | grep "reports/.*\.json" || true)
          
          if [ -n "$NEW_REPORTS" ]; then
            echo "Processing new reports:"
            echo "$NEW_REPORTS"
            
            # Process each new report
            for report in $NEW_REPORTS; do
              if [[ "$report" == *"report.json" ]]; then
                echo "Processing: $report"
                # Future: Add AI analysis or additional processing here
                node -e "
                  const fs = require('fs');
                  const report = JSON.parse(fs.readFileSync('$report', 'utf8'));
                  console.log('Report processed:', report.execution.id);
                  // Add any additional processing logic here
                "
              fi
            done
          else
            echo "No new reports to process"
          fi

      - name: Update reports statistics
        run: |
          # Generate aggregate statistics
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            try {
              const indexPath = 'reports/index.json';
              if (fs.existsSync(indexPath)) {
                const index = JSON.parse(fs.readFileSync(indexPath, 'utf8'));
                const stats = {
                  totalReports: index.reports.length,
                  lastUpdated: new Date().toISOString(),
                  summary: {
                    totalTests: index.reports.reduce((sum, r) => sum + r.summary.total, 0),
                    totalPassed: index.reports.reduce((sum, r) => sum + r.summary.passed, 0),
                    totalFailed: index.reports.reduce((sum, r) => sum + r.summary.failed, 0),
                    developers: [...new Set(index.reports.map(r => r.developer))],
                    branches: [...new Set(index.reports.map(r => r.branch).filter(Boolean))]
                  }
                };
                
                fs.writeFileSync('reports/stats.json', JSON.stringify(stats, null, 2));
                console.log('Generated statistics:', stats);
              }
            } catch (error) {
              console.error('Error generating statistics:', error);
            }
          "

      - name: Commit updated statistics
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -f "reports/stats.json" ]; then
            git add reports/stats.json
            git commit -m "Update report statistics [skip ci]" || echo "No changes to commit"
            git push
          fi

  validate-reports:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Add test report')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Validate report structure
        run: |
          # Find new report files
          NEW_REPORTS=$(git diff --name-only HEAD~1 HEAD | grep "reports/.*report\.json" || true)
          
          if [ -n "$NEW_REPORTS" ]; then
            echo "Validating reports:"
            for report in $NEW_REPORTS; do
              echo "Validating: $report"
              node -e "
                const fs = require('fs');
                const report = JSON.parse(fs.readFileSync('$report', 'utf8'));
                
                // Basic validation
                const required = ['execution', 'results', 'summary'];
                const missing = required.filter(field => !report[field]);
                
                if (missing.length > 0) {
                  console.error('Missing required fields:', missing);
                  process.exit(1);
                }
                
                if (!report.execution.id || !report.execution.developer) {
                  console.error('Missing execution metadata');
                  process.exit(1);
                }
                
                console.log('âœ“ Report validation passed');
              "
            done
          fi

  cleanup-old-reports:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean up old reports
        run: |
          # Keep only the last 200 reports
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            try {
              const indexPath = 'reports/index.json';
              if (fs.existsSync(indexPath)) {
                const index = JSON.parse(fs.readFileSync(indexPath, 'utf8'));
                
                if (index.reports.length > 200) {
                  const reportsToRemove = index.reports.slice(200);
                  
                  // Remove old report directories
                  for (const report of reportsToRemove) {
                    const reportDir = path.join('reports', report.id);
                    if (fs.existsSync(reportDir)) {
                      fs.rmSync(reportDir, { recursive: true, force: true });
                      console.log('Removed old report:', report.id);
                    }
                  }
                  
                  // Update index
                  index.reports = index.reports.slice(0, 200);
                  index.lastUpdated = new Date().toISOString();
                  fs.writeFileSync(indexPath, JSON.stringify(index, null, 2));
                  
                  console.log('Cleanup completed. Kept 200 most recent reports.');
                }
              }
            } catch (error) {
              console.error('Error during cleanup:', error);
            }
          "

      - name: Commit cleanup changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Clean up old reports [skip ci]"
            git push
          fi 